// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Empresa {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  cnpj      String?  @db.VarChar(120)
  empresaToken String   @unique @default(uuid())
  email        String   @unique @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  condominios Condominio[]
  atividades  Atividade[]

  @@index([name])
}

model User {
  id           String  @id @default(uuid())
  email        String  @unique @db.VarChar(255)
  name         String? @db.VarChar(120)
  passwordHash String  @db.VarChar(255)
  refreshToken String? @db.Text
  role         Role    @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  empresaId String
  empresa   Empresa @relation(fields: [empresaId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([empresaId])
}

model Condominio {
  id           String  @id @default(uuid())
  name         String  @db.VarChar(120)
  cnpj         String? @unique @db.VarChar(255)
  address      String  @db.VarChar(160)
  neighborhood String  @db.VarChar(80)
  city         String  @db.VarChar(80)
  state        String  @db.VarChar(2)
  type         String  @db.VarChar(30)
  imageUrl     String? @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  empresaId String
  empresa   Empresa @relation(fields: [empresaId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  referenceId  String?
  reference    Condominio?  @relation(name: "CondominioReferencia", fields: [referenceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  referencedBy Condominio[] @relation(name: "CondominioReferencia")

  atividades Atividade[]

  @@index([empresaId])
  @@index([city, state])
  @@index([name])
  @@index([referenceId])
}

// Enums novos
enum AtividadeStatus {
  PROXIMAS
  EM_ANDAMENTO
  PENDENTE
  HISTORICO
}

enum Prioridade {
  BAIXO
  MEDIO
  ALTO
  URGENTE
}

enum BudgetStatus {
  SEM_ORCAMENTO
  PENDENTE
  APROVADO
  REPROVADO
}

model Atividade {
  id       String  @id @default(uuid())
  name     String  @db.VarChar(120)
  type     String  @db.VarChar(80)
  quantity Int
  model    String  @db.VarChar(160)
  location String  @db.VarChar(120)
  photoUrl String? @db.VarChar(255)

  // novo: enum
  status     AtividadeStatus @default(PROXIMAS)
  prioridade Prioridade      @default(BAIXO)

  frequencia    String  @default("Não se repete") @db.VarChar(100)
  equipe        String  @default("Equipe interna") @db.VarChar(100)
  tipoAtividade String  @default("Preventiva") @db.VarChar(100)
  observacoes   String? @db.Text

  // datas (V2)
  expectedDate DateTime?
  startAt      DateTime?
  endAt        DateTime?
  completedAt  DateTime?

  // listas/extra
  tags String[] @default([])


  // orçamento
  budgetStatus   BudgetStatus @default(SEM_ORCAMENTO)
  costEstimate   Decimal?     @db.Decimal(12, 2)
  approvedBudget Decimal?     @db.Decimal(12, 2)

  appliedStandard String? @db.VarChar(120)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  empresaId String
  empresa   Empresa @relation(fields: [empresaId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  condominioId String
  condominio   Condominio @relation(fields: [condominioId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([empresaId])
  @@index([condominioId])
  @@index([status])
  @@index([expectedDate])
}

enum Role {
  USER
  ADMIN
}
